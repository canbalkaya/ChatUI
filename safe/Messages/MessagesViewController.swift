//
//  MessagesViewController.swift
//  safe
//
//  Created by Daniel on 8/10/19.
//  Copyright (c) 2019 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IGListKit

protocol MessagesDisplayLogic: class {
  func displaySomething(viewModel: Messages.Something.ViewModel)
}

class MessagesViewController: UIViewController, MessagesDisplayLogic {
  var interactor: MessagesBusinessLogic?
  var router: (NSObjectProtocol & MessagesRoutingLogic & MessagesDataPassing)?
  let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
  lazy var adapter: ListAdapter = {
    return ListAdapter(updater: ListAdapterUpdater(), viewController: self, workingRangeSize: 2)
  }()

  // MARK: Object lifecycle
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    let viewController = self
    let interactor = MessagesInteractor()
    let presenter = MessagesPresenter()
    let router = MessagesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    view.addSubview(collectionView)
    collectionView.backgroundColor = .white
    adapter.collectionView = collectionView
    adapter.dataSource = self
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething() {
    let request = Messages.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Messages.Something.ViewModel) {
    //nameTextField.text = viewModel.name
  }
}
