//
//  MessagesViewController.swift
//  safe
//
//  Created by Daniel on 8/10/19.
//  Copyright (c) 2019 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IGListKit

protocol MessagesDisplayLogic: class {
  func displaySomething(viewModel: Messages.Something.ViewModel)
}

class MessagesViewController: UIViewController, MessagesDisplayLogic {
  var interactor: MessagesBusinessLogic?
  var router: (NSObjectProtocol & MessagesRoutingLogic & MessagesDataPassing)?
  var messages: [Any] = []
  let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())
  lazy var adapter: ListAdapter = {
    return ListAdapter(updater: ListAdapterUpdater(), viewController: self, workingRangeSize: 2)
  }()

  // MARK: Object lifecycle
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  private func setup() {
    generateChat()
    let viewController = self
    let interactor = MessagesInteractor()
    let presenter = MessagesPresenter()
    let router = MessagesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    view.addSubview(collectionView)
    adapter.collectionView = collectionView
    adapter.dataSource = self
    doSomething()
  }

  override func viewDidLayoutSubviews() {
    super.viewDidLayoutSubviews()
    collectionView.frame = view.bounds
    collectionView.keyboardDismissMode = .interactive
    collectionView.contentInset = UIEdgeInsets(top: 16, left: 0, bottom: 0, right: 0)
    collectionView.backgroundColor = UIColor(red: 0.1, green: 0.13, blue: 0.17, alpha: 1)
    guard let lastComment = messages.last else { return }
    adapter.scroll(to: lastComment, supplementaryKinds: nil, scrollDirection: .vertical, scrollPosition: .centeredVertically, animated: false)
  }

  // MARK: Do something
  func doSomething() {
    let request = Messages.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Messages.Something.ViewModel) {
    //nameTextField.text = viewModel.name
  }
}

extension MessagesViewController : ListAdapterDataSource {
  func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
    return messages as! [ListDiffable]
  }

  func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
    switch object {
    case is MessageModel:
      let sectionController = MessageSectionController()
      sectionController.inset = UIEdgeInsets(top: 0, left: 0, bottom: 15, right: 0)
      return sectionController
    case is ImageModel:
      let sectionController = ImagesSectionController()
      sectionController.inset = UIEdgeInsets(top: 0, left: 0, bottom: 15, right: 0)
      return sectionController
    default:
      let sectionController = MessageSectionController()
      sectionController.inset = UIEdgeInsets(top: 0, left: 0, bottom: 15, right: 0)
      return sectionController
    }
  }

  func emptyView(for listAdapter: ListAdapter) -> UIView? {
    return nil
  }
}


extension MessagesViewController {
  func generateChat() {
    messages = [
      MessageModel(id: -1, name: "Ignacia", text: "Have the courage to follow your heart and intuition.\n They somehow already know what you truly want to become.", isUser: false),
      MessageModel(id: 0, name: "Daniel", text: "Hola!", isUser: true),
      MessageModel(id: 1, name: "Daniel", text: "Todo bien?, todo correcto ?", isUser: true),
      MessageModel(id: 2, name: "Ignacia", text: "Sii ðŸ˜€", isUser: false),
      ImageModel(id: 100, name: "Ignacia", imageUrl: "https://images.unsplash.com/photo-1562101660-341f383a839e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2775&q=80", isUser: false),
      MessageModel(id: 3, name: "Daniel", text: "Y yo que me alegro", isUser: true),
      MessageModel(id: 4, name: "Daniel", text: "Siempre hemos apostado por lo extraordinario. Es lo que nos ha dado la fuerza para trazar nuestro propio camino desde 1878.", isUser: true),
      MessageModel(id: 5, name: "Ignacia", text: "Ir a la caza de sabores Ãºnicos requiere tiempo y paciencia, pero sobre todo necesita la habilidad y creatividad de reescribir las reglas. \n Por eso hemos revisado cuidadosamente nuestro proceso de producciÃ³n para incorporar diferenciadores matices de roble en la personalidad de Manifest", isUser: false),
      ImageModel(id: 101, name: "Ignacia", imageUrl: "https://images.unsplash.com/photo-1565520013817-fd4046d0701c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80", isUser: false),
      MessageModel(id: 6, name: "Daniel", text: "In general, that should be all you need in most cases.\n Even if you are changing the height of the text view on the fly, this usually does all you need.\n (A common example of changing the height on the fly, is changing it as the user types.) \n Here is the broken UITextView from Apple...", isUser: true),
      ImageModel(id: 102, name: "Daniel", imageUrl: "https://images.unsplash.com/photo-1565509060132-293b2e10fabb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80", isUser: true),
      MessageModel(id: 7, name: "Ignacia", text: "You canâ€™t connect the dots looking forward; you can only connect them looking backward. So you have to trust that the dots will somehow connect in your future.", isUser: false),
      MessageModel(id: 8, name: "Ignacia", text: "Your time is limited, so donâ€™t waste it living someone elseâ€™s life.", isUser: false),
      ImageModel(id: 103, name: "Ignacia", imageUrl: "https://images.unsplash.com/photo-1563303042-b9fe51ff7227?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=913&q=80", isUser: false),
      MessageModel(id: 9, name: "Ignacia", text: "Have the courage to follow your heart and intuition. They somehow already know what you truly want to become.", isUser: false),
      MessageModel(id: 10, name: "Ignacia", text: "If today were the last day of your life, would you want to do what you are about to do today?", isUser: false),
      MessageModel(id: 11, name: "Daniel", text: "Hola!", isUser: true),
      MessageModel(id: 12, name: "Daniel", text: "Todo bien?, todo correcto ?", isUser: true),
      MessageModel(id: 13, name: "Ignacia", text: "Sii ðŸ˜€", isUser: false),
      MessageModel(id: 14, name: "Daniel", text: "Y yo que me alegro", isUser: true),
      MessageModel(id: 15, name: "Daniel", text: "Siempre hemos apostado por lo extraordinario. Es lo que nos ha dado la fuerza para trazar nuestro propio camino desde 1878.", isUser: true),
      MessageModel(id: 16, name: "Ignacia", text: "Ir a la caza de sabores Ãºnicos requiere tiempo y paciencia, pero sobre todo necesita la habilidad y creatividad de reescribir las reglas.\n Por eso hemos revisado cuidadosamente nuestro proceso de producciÃ³n para incorporar diferenciadores matices de roble en la personalidad de Manifest", isUser: false),
      ImageModel(id: 104, name: "Daniel", imageUrl: "https://images.unsplash.com/photo-1563669528538-1f3d1d08791b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=934&q=80", isUser: true),
      ImageModel(id: 105, name: "Ignacia", imageUrl: "https://images.unsplash.com/photo-1562709734-e584493dbdd8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=994&q=80", isUser: false),
      MessageModel(id: 17, name: "Daniel", text: "In general, that should be all you need in most cases.\n Even if you are changing the height of the text view on the fly, this usually does all you need.\n (A common example of changing the height on the fly, is changing it as the user types.) \n Here is the broken UITextView from Apple...", isUser: true),
      MessageModel(id: 18, name: "Ignacia", text: "You canâ€™t connect the dots looking forward; you can only connect them looking backward. So you have to trust that the dots will somehow connect in your future.", isUser: false),
      MessageModel(id: 19, name: "Ignacia", text: "Have the courage to follow your heart and intuition.\n They somehow already know what you truly want to become.", isUser: false),
      MessageModel(id: 20, name: "Ignacia", text: "If today were the last day of your life, would you want to do what you are about to do today?", isUser: false)
    ]
  }
}
